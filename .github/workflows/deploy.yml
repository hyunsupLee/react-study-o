name: CI/CD Pipeline

on:
  #   push:
  #     branches:
  #       - main

  workflow_dispatch:
    inputs:
      reason:
        description: "수동 배포 사유"
        required: false
        default: "React studyo 배포"

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Node.js for frontend build
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies and build frontend
        run: |
          npm ci
          npm run build

      - name: Docker build & push all services
        run: |
          # docker-compose가 설치되어 있지 않으면 설치
          if ! command -v docker-compose &> /dev/null
          then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          # docker-compose를 사용하여 모든 서비스의 이미지를 빌드하고 푸시
          sudo docker-compose build
          sudo docker-compose push

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # docker-compose가 설치되어 있지 않으면 설치
            if ! command -v docker-compose &> /dev/null
            then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # 서버에 접속하여 docker-compose.yml 파일이 있는 디렉토리로 이동
            cd /home/ubuntu

            # studyo와 tjspring 컨테이너만 중지 및 삭제 (데이터베이스는 건드리지 않음)
            sudo docker-compose stop studyo tjspring
            sudo docker-compose rm -f studyo tjspring

            # 최신 이미지 pull
            sudo docker-compose pull

            # 모든 컨테이너를 다시 시작 (백그라운드에서 실행)
            # --no-recreate 옵션으로 기존 컨테이너를 재사용하고, studyo와 tjspring만 업데이트
            sudo docker-compose up -d --force-recreate --no-deps tjspring studyo

            # 사용하지 않는 이미지 정리
            sudo docker image prune -f
